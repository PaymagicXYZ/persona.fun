diff --git a/dist/index.d.ts b/dist/index.d.ts
index 8009da1edcdd98f1ed70b9126bd1ae5217900cb3..ff6c99c4f622073d6a27939415920c2f4ae2ea16 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -8,6 +8,7 @@ type Profile = {
     pfp?: string;
     bio?: string;
     url?: string;
+    verifiedAddress?: string;
 };
 type NeynarCastResponse = {
     hash: string;
diff --git a/dist/index.js b/dist/index.js
index 2e20c76ac103c81e982e6d4c47568eb53e12cb5f..972981ce063cfd977cf5d94f14de190196412c56 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -128,7 +128,8 @@ var FarcasterClient = class {
         profile: {
           fid: notification.cast.author.fid,
           name: notification.cast.author.display_name || "anon",
-          username: notification.cast.author.username
+          username: notification.cast.author.username,
+          verifiedAddress: notification.cast!.author.verified_addresses.eth_addresses?.[0] || "",
         },
         ...notification.cast.parent_hash ? {
           inReplyTo: {
@@ -599,6 +600,11 @@ import {
   ModelClass as ModelClass2,
   stringToUuid as stringToUuid4
 } from "@ai16z/eliza";
+import { createClient } from "@supabase/supabase-js";
+const supabase = createClient(
+  process.env.SUPABASE_URL,
+  process.env.SUPABASE_SERVICE_ROLE_KEY
+);
 var FarcasterInteractionManager = class {
   constructor(client, runtime, signerUuid, cache) {
     this.client = client;
@@ -627,6 +633,8 @@ var FarcasterInteractionManager = class {
   }
   async handleInteractions() {
     const agentFid = Number(this.runtime.getSetting("FARCASTER_FID"));
+    const maxResponsesPerThread = 4; // Set your desired limit here
+
     const mentions = await this.client.getMentions({
       fid: agentFid,
       pageSize: 10
@@ -657,6 +665,10 @@ var FarcasterInteractionManager = class {
         runtime: this.runtime,
         cast: mention
       });
+      if (thread.length >= maxResponsesPerThread) {
+        console.log(`Skipping thread with more than ${maxResponsesPerThread} responses`);
+        continue;
+    }
       const memory = {
         content: { text: mention.text },
         agentId: this.runtime.agentId,
@@ -737,6 +749,23 @@ var FarcasterInteractionManager = class {
       modelClass: ModelClass2.LARGE
     });
     response.inReplyTo = memoryId;
+    const agentMessagesCount = thread.filter(
+      (cast) => cast.profile.fid === agent.fid
+  ).length;
+
+  if (agentMessagesCount === 1 && cast.profile.verifiedAddress) {
+    const tokenName = this.runtime.getSetting("TOKEN_NAME");
+    const tokenId = this.runtime.getSetting("TOKEN_ID");
+    const personaId = this.runtime.getSetting("PERSONA_ID");
+    const randomValue = Math.floor(Math.random() * (1000 - 400 + 1)) + 400;
+      response.text += "\n\n\n" + `${randomValue} $${tokenName}`;
+      await supabase.from('tips').insert({
+        value: randomValue,
+        persona_id: personaId,
+        token_id: tokenId,
+        address: cast.profile.verifiedAddress
+      });
+  }
     if (!response.text) return;
     try {
       console.log(`Replying to cast ${cast.hash}.`);
diff --git a/src/client.ts b/src/client.ts
index 9aa780dc4f13cf8b47d7f1c5f290fdc6462e314a..1ac3a0032f7dde93418fa8e3bde465d8ffe61ebb 100644
--- a/src/client.ts
+++ b/src/client.ts
@@ -150,6 +150,7 @@ export class FarcasterClient {
                     fid: notification.cast!.author.fid,
                     name: notification.cast!.author.display_name || "anon",
                     username: notification.cast!.author.username,
+                    verifiedAddress: notification.cast!.author.verified_addresses.eth_addresses?.[0] || "",
                 },
                 ...(notification.cast!.parent_hash
                     ? {
