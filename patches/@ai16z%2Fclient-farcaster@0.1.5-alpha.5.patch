diff --git a/src/interactions.ts b/src/interactions.ts
index d3a1e0b71289f27a85125a002c61fb0fe441b583..5eb34fb6f816331b3a42afcd3e19dd78b3a06868 100644
--- a/src/interactions.ts
+++ b/src/interactions.ts
@@ -1,242 +1,235 @@
 import {
-    composeContext,
-    generateMessageResponse,
-    generateShouldRespond,
-    Memory,
-    ModelClass,
-    stringToUuid,
-    type IAgentRuntime,
-} from "@ai16z/eliza";
-import type { FarcasterClient } from "./client";
-import { toHex } from "viem";
-import { buildConversationThread, createCastMemory } from "./memory";
-import { Cast, Profile } from "./types";
+  composeContext,
+  generateMessageResponse,
+  generateShouldRespond,
+  Memory,
+  ModelClass,
+  stringToUuid,
+  type IAgentRuntime,
+} from '@ai16z/eliza'
+import type { FarcasterClient } from './client'
+import { toHex } from 'viem'
+import { buildConversationThread, createCastMemory } from './memory'
+import { Cast, Profile } from './types'
 import {
-    formatCast,
-    formatTimeline,
-    messageHandlerTemplate,
-    shouldRespondTemplate,
-} from "./prompts";
-import { castUuid } from "./utils";
-import { sendCast } from "./actions";
+  formatCast,
+  formatTimeline,
+  messageHandlerTemplate,
+  shouldRespondTemplate,
+} from './prompts'
+import { castUuid } from './utils'
+import { sendCast } from './actions'
 
 export class FarcasterInteractionManager {
-    private timeout: NodeJS.Timeout | undefined;
-    constructor(
-        public client: FarcasterClient,
-        public runtime: IAgentRuntime,
-        private signerUuid: string,
-        public cache: Map<string, any>
-    ) {}
-
-    public async start() {
-        const handleInteractionsLoop = async () => {
-            try {
-                await this.handleInteractions();
-            } catch (error) {
-                console.error(error);
-                return;
-            }
-
-            this.timeout = setTimeout(
-                handleInteractionsLoop,
-                (Math.floor(Math.random() * (5 - 2 + 1)) + 2) * 60 * 1000
-            ); // Random interval between 2-5 minutes
-        };
-
-        handleInteractionsLoop();
+  private timeout: NodeJS.Timeout | undefined
+  constructor(
+    public client: FarcasterClient,
+    public runtime: IAgentRuntime,
+    private signerUuid: string,
+    public cache: Map<string, any>
+  ) {}
+
+  public async start() {
+    const handleInteractionsLoop = async () => {
+      try {
+        await this.handleInteractions()
+      } catch (error) {
+        console.error(error)
+        return
+      }
+
+      this.timeout = setTimeout(
+        handleInteractionsLoop,
+        (Math.floor(Math.random() * (5 - 2 + 1)) + 2) * 60 * 1000
+      ) // Random interval between 2-5 minutes
     }
 
-    public async stop() {
-        if (this.timeout) clearTimeout(this.timeout);
+    handleInteractionsLoop()
+  }
+
+  public async stop() {
+    if (this.timeout) clearTimeout(this.timeout)
+  }
+
+  private async handleInteractions() {
+    const agentFid = Number(this.runtime.getSetting('FARCASTER_FID'))
+
+    const mentions = await this.client.getMentions({
+      fid: agentFid,
+      pageSize: 10,
+    })
+
+    const agent = await this.client.getProfile(agentFid)
+    for (const mention of mentions) {
+      const messageHash = toHex(mention.hash)
+      const conversationId = `${messageHash}-${this.runtime.agentId}`
+      const roomId = stringToUuid(conversationId)
+      const userId = stringToUuid(mention.authorFid.toString())
+
+      const pastMemoryId = castUuid({
+        agentId: this.runtime.agentId,
+        hash: mention.hash,
+      })
+
+      const pastMemory = await this.runtime.messageManager.getMemoryById(pastMemoryId)
+
+      if (pastMemory) {
+        continue
+      }
+
+      await this.runtime.ensureConnection(
+        userId,
+        roomId,
+        mention.profile.username,
+        mention.profile.name,
+        'farcaster'
+      )
+
+      const thread = await buildConversationThread({
+        client: this.client,
+        runtime: this.runtime,
+        cast: mention,
+      })
+
+      const memory: Memory = {
+        content: { text: mention.text },
+        agentId: this.runtime.agentId,
+        userId,
+        roomId,
+      }
+
+      await this.handleCast({
+        agent,
+        cast: mention,
+        memory,
+        thread,
+      })
     }
 
-    private async handleInteractions() {
-        const agentFid = Number(this.runtime.getSetting("FARCASTER_FID"));
-
-        const mentions = await this.client.getMentions({
-            fid: agentFid,
-            pageSize: 10,
-        });
-
-        const agent = await this.client.getProfile(agentFid);
-        for (const mention of mentions) {
-            const messageHash = toHex(mention.hash);
-            const conversationId = `${messageHash}-${this.runtime.agentId}`;
-            const roomId = stringToUuid(conversationId);
-            const userId = stringToUuid(mention.authorFid.toString());
-
-            const pastMemoryId = castUuid({
-                agentId: this.runtime.agentId,
-                hash: mention.hash,
-            });
-
-            const pastMemory =
-                await this.runtime.messageManager.getMemoryById(pastMemoryId);
-
-            if (pastMemory) {
-                continue;
-            }
-
-            await this.runtime.ensureConnection(
-                userId,
-                roomId,
-                mention.profile.username,
-                mention.profile.name,
-                "farcaster"
-            );
-
-            const thread = await buildConversationThread({
-                client: this.client,
-                runtime: this.runtime,
-                cast: mention,
-            });
-
-            const memory: Memory = {
-                content: { text: mention.text },
-                agentId: this.runtime.agentId,
-                userId,
-                roomId,
-            };
-
-            await this.handleCast({
-                agent,
-                cast: mention,
-                memory,
-                thread
-            });
-        }
-
-        this.client.lastInteractionTimestamp = new Date();
+    this.client.lastInteractionTimestamp = new Date()
+  }
+
+  private async handleCast({
+    agent,
+    cast,
+    memory,
+    thread,
+  }: {
+    agent: Profile
+    cast: Cast
+    memory: Memory
+    thread: Cast[]
+  }) {
+    if (cast.profile.fid === agent.fid) {
+      console.log('skipping cast from bot itself', cast.hash)
+      return
     }
 
-    private async handleCast({
-        agent,
-        cast,
+    if (!memory.content.text) {
+      console.log('skipping cast with no text', cast.hash)
+      return { text: '', action: 'IGNORE' }
+    }
+
+    const currentPost = formatCast(cast)
+
+    const { timeline } = await this.client.getTimeline({
+      fid: agent.fid,
+      pageSize: 10,
+    })
+
+    const formattedTimeline = formatTimeline(this.runtime.character, timeline)
+
+    const state = await this.runtime.composeState(memory, {
+      farcasterUsername: agent.username,
+      timeline: formattedTimeline,
+      currentPost,
+    })
+
+    const shouldRespondContext = composeContext({
+      state,
+      template:
+        this.runtime.character.templates?.farcasterShouldRespondTemplate ||
+        this.runtime.character?.templates?.shouldRespondTemplate ||
+        shouldRespondTemplate,
+    })
+
+    const memoryId = castUuid({
+      agentId: this.runtime.agentId,
+      hash: cast.hash,
+    })
+
+    const castMemory = await this.runtime.messageManager.getMemoryById(memoryId)
+
+    if (!castMemory) {
+      await this.runtime.messageManager.createMemory(
+        createCastMemory({
+          roomId: memory.roomId,
+          runtime: this.runtime,
+          cast,
+        })
+      )
+    }
+
+    const shouldRespond = await generateShouldRespond({
+      runtime: this.runtime,
+      context: shouldRespondContext,
+      modelClass: ModelClass.SMALL,
+    })
+
+    if (!shouldRespond) {
+      console.log('Not responding to message')
+      return { text: '', action: 'IGNORE' }
+    }
+
+    const context = composeContext({
+      state,
+      template:
+        this.runtime.character.templates?.farcasterMessageHandlerTemplate ??
+        this.runtime.character?.templates?.messageHandlerTemplate ??
+        messageHandlerTemplate,
+    })
+
+    const response = await generateMessageResponse({
+      runtime: this.runtime,
+      context,
+      modelClass: ModelClass.LARGE,
+    })
+
+    response.inReplyTo = memoryId
+
+    if (!response.text) return
+
+    try {
+      console.log(`Replying to cast ${cast.hash}.`)
+
+      const results = await sendCast({
+        runtime: this.runtime,
+        client: this.client,
+        signerUuid: this.signerUuid,
+        profile: cast.profile,
+        content: response,
+        roomId: memory.roomId,
+        inReplyTo: {
+          fid: cast.authorFid,
+          hash: cast.hash,
+        },
+      })
+
+      const newState = await this.runtime.updateRecentMessageState(state)
+
+      for (const { memory } of results) {
+        await this.runtime.messageManager.createMemory(memory)
+      }
+
+      await this.runtime.evaluate(memory, newState)
+
+      await this.runtime.processActions(
         memory,
-        thread
-    }: {
-        agent: Profile;
-        cast: Cast;
-        memory: Memory;
-        thread: Cast[]
-    }) {
-        if (cast.profile.fid === agent.fid) {
-            console.log("skipping cast from bot itself", cast.hash);
-            return;
-        }
-
-        if (!memory.content.text) {
-            console.log("skipping cast with no text", cast.hash);
-            return { text: "", action: "IGNORE" };
-        }
-
-        const currentPost = formatCast(cast);
-
-        const { timeline } = await this.client.getTimeline({
-            fid: agent.fid,
-            pageSize: 10,
-        });
-
-        const formattedTimeline = formatTimeline(
-            this.runtime.character,
-            timeline
-        );
-
-        const state = await this.runtime.composeState(memory, {
-            farcasterUsername: agent.username,
-            timeline: formattedTimeline,
-            currentPost,
-        });
-
-        const shouldRespondContext = composeContext({
-            state,
-            template:
-                this.runtime.character.templates
-                    ?.farcasterShouldRespondTemplate ||
-                this.runtime.character?.templates?.shouldRespondTemplate ||
-                shouldRespondTemplate,
-        });
-
-        const memoryId = castUuid({
-            agentId: this.runtime.agentId,
-            hash: cast.hash,
-        });
-
-        const castMemory =
-            await this.runtime.messageManager.getMemoryById(memoryId);
-
-        if (!castMemory) {
-            await this.runtime.messageManager.createMemory(
-                createCastMemory({
-                    roomId: memory.roomId,
-                    runtime: this.runtime,
-                    cast,
-                })
-            );
-        }
-
-        const shouldRespond = await generateShouldRespond({
-            runtime: this.runtime,
-            context: shouldRespondContext,
-            modelClass: ModelClass.SMALL,
-        });
-
-        if (!shouldRespond) {
-            console.log("Not responding to message");
-            return { text: "", action: "IGNORE" };
-        }
-
-        const context = composeContext({
-            state,
-            template:
-                this.runtime.character.templates
-                    ?.farcasterMessageHandlerTemplate ??
-                this.runtime.character?.templates?.messageHandlerTemplate ??
-                messageHandlerTemplate,
-        });
-
-        const response = await generateMessageResponse({
-            runtime: this.runtime,
-            context,
-            modelClass: ModelClass.LARGE,
-        });
-
-        response.inReplyTo = memoryId;
-
-        if (!response.text) return;
-
-        try {
-            console.log(`Replying to cast ${cast.hash}.`);
-
-            const results = await sendCast({
-                runtime: this.runtime,
-                client: this.client,
-                signerUuid: this.signerUuid,
-                profile: cast.profile,
-                content: response,
-                roomId: memory.roomId,
-                inReplyTo: {
-                    fid: cast.authorFid,
-                    hash: cast.hash,
-                },
-            });
-
-            const newState = await this.runtime.updateRecentMessageState(state);
-
-            for (const { memory } of results) {
-                await this.runtime.messageManager.createMemory(memory);
-            }
-
-            await this.runtime.evaluate(memory, newState);
-
-            await this.runtime.processActions(
-                memory,
-                results.map((result) => result.memory),
-                newState
-            );
-        } catch (error) {
-            console.error(`Error sending response cast: ${error}`);
-        }
+        results.map((result) => result.memory),
+        newState
+      )
+    } catch (error) {
+      console.error(`Error sending response cast: ${error}`)
     }
+  }
 }
diff --git a/src/memory.ts b/src/memory.ts
index b3a8c862c96f3de898e4f020064c25c44de9fda3..7d2c21017bdf59e5bde653729ebb1f35524307a2 100644
--- a/src/memory.ts
+++ b/src/memory.ts
@@ -40,6 +40,7 @@ export function createCastMemory({
             url: "",
             inReplyTo,
             hash: cast.hash,
+            action: "TIP_USER",
         },
         roomId,
         embedding: getEmbeddingZeroVector(),
