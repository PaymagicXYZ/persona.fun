diff --git a/dist/index.js b/dist/index.js
index 8882495c456584e7a3857a9649cb693a3a0cd83f..267b8eca39b48b420b3efb221ea94989b7663b8e 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -86,113 +86,133 @@ var TwitterPostClient = class {
     this.runtime = runtime;
   }
   async generateNewTweet() {
+    console.log("[TwitterPost] Starting generateNewTweet");
     elizaLogger.log("Generating new tweet");
     try {
-      const roomId = stringToUuid(
-        "twitter_generate_room-" + this.client.profile.username
-      );
-      await this.runtime.ensureUserExists(
-        this.runtime.agentId,
-        this.client.profile.username,
-        this.runtime.character.name,
-        "twitter"
-      );
-      const topics = this.runtime.character.topics.join(", ");
-      const state = await this.runtime.composeState(
-        {
-          userId: this.runtime.agentId,
-          roomId,
-          agentId: this.runtime.agentId,
-          content: {
-            text: topics,
-            action: ""
-          }
-        },
-        {
-          twitterUserName: this.client.profile.username
-        }
-      );
-      const context = composeContext({
-        state,
-        template: this.runtime.character.templates?.twitterPostTemplate || twitterPostTemplate
-      });
-      elizaLogger.debug("generate post prompt:\n" + context);
-      const newTweetContent = await generateText({
-        runtime: this.runtime,
-        context,
-        modelClass: ModelClass.SMALL
-      });
-      const formattedTweet = newTweetContent.replaceAll(/\\n/g, "\n").trim();
-      const content = truncateToCompleteSentence(formattedTweet);
-      if (this.runtime.getSetting("TWITTER_DRY_RUN") === "true") {
-        elizaLogger.info(
-          `Dry run: would have posted tweet: ${content}`
+        console.log("[TwitterPost] Generating roomId");
+        const roomId = stringToUuid(
+            "twitter_generate_room-" + this.client.profile.username
         );
-        return;
-      }
-      try {
-        elizaLogger.log(`Posting new tweet:
- ${content}`);
-        const result = await this.client.requestQueue.add(
-          async () => await this.client.twitterClient.sendTweet(content)
+        console.log("[TwitterPost] RoomId generated:", roomId);
+
+        console.log("[TwitterPost] Ensuring user exists");
+        await this.runtime.ensureUserExists(
+            this.runtime.agentId,
+            this.client.profile.username,
+            this.runtime.character.name,
+            "twitter"
         );
-        const body = await result.json();
-        if (!body?.data?.create_tweet?.tweet_results?.result) {
-          console.error("Error sending tweet; Bad response:", body);
+        console.log("[TwitterPost] User existence confirmed");
+
+        console.log("[TwitterPost] Getting topics");
+        const topics = this.runtime.character.topics.join(", ");
+        console.log("[TwitterPost] Topics:", topics);
+
+        console.log("[TwitterPost] Composing state");
+        const state = await this.runtime.composeState(
+            {
+                userId: this.runtime.agentId,
+                roomId,
+                agentId: this.runtime.agentId,
+                content: {
+                    text: topics,
+                    action: ""
+                }
+            },
+            {
+                twitterUserName: this.client.profile.username
+            }
+        );
+        console.log("[TwitterPost] State composed");
+
+        console.log("[TwitterPost] Composing context");
+        const context = composeContext({
+            state,
+            template: this.runtime.character.templates?.twitterPostTemplate || twitterPostTemplate
+        });
+        console.log("[TwitterPost] Context composed");
+
+        elizaLogger.debug("generate post prompt:\n" + context);
+
+        console.log("[TwitterPost] Generating text");
+        const newTweetContent = await generateText({
+            runtime: this.runtime,
+            context,
+            modelClass: ModelClass.SMALL
+        });
+        console.log("[TwitterPost] Text generated:", newTweetContent.slice(0, 50) + "...");
+
+        const formattedTweet = newTweetContent.replaceAll(/\\n/g, "\n").trim();
+        const content = truncateToCompleteSentence(formattedTweet);
+        if (this.runtime.getSetting("TWITTER_DRY_RUN") === "true") {
+          elizaLogger.info(
+            `Dry run: would have posted tweet: ${content}`
+          );
           return;
         }
-        const tweetResult = body.data.create_tweet.tweet_results.result;
-        const tweet = {
-          id: tweetResult.rest_id,
-          name: this.client.profile.screenName,
-          username: this.client.profile.username,
-          text: tweetResult.legacy.full_text,
-          conversationId: tweetResult.legacy.conversation_id_str,
-          createdAt: tweetResult.legacy.created_at,
-          timestamp: new Date(
-            tweetResult.legacy.created_at
-          ).getTime(),
-          userId: this.client.profile.id,
-          inReplyToStatusId: tweetResult.legacy.in_reply_to_status_id_str,
-          permanentUrl: `https://twitter.com/${this.runtime.getSetting("TWITTER_USERNAME")}/status/${tweetResult.rest_id}`,
-          hashtags: [],
-          mentions: [],
-          photos: [],
-          thread: [],
-          urls: [],
-          videos: []
-        };
-        await this.runtime.cacheManager.set(
-          `twitter/${this.client.profile.username}/lastPost`,
-          {
-            id: tweet.id,
-            timestamp: Date.now()
+        try {
+          elizaLogger.log(`Posting new tweet:
+ ${content}`);
+          const result = await this.client.requestQueue.add(
+            async () => await this.client.twitterClient.sendTweet(content)
+          );
+          const body = await result.json();
+          if (!body?.data?.create_tweet?.tweet_results?.result) {
+            console.error("Error sending tweet; Bad response:", body);
+            return;
           }
-        );
-        await this.client.cacheTweet(tweet);
-        elizaLogger.log(`Tweet posted:
+          const tweetResult = body.data.create_tweet.tweet_results.result;
+          const tweet = {
+            id: tweetResult.rest_id,
+            name: this.client.profile.screenName,
+            username: this.client.profile.username,
+            text: tweetResult.legacy.full_text,
+            conversationId: tweetResult.legacy.conversation_id_str,
+            createdAt: tweetResult.legacy.created_at,
+            timestamp: new Date(
+              tweetResult.legacy.created_at
+            ).getTime(),
+            userId: this.client.profile.id,
+            inReplyToStatusId: tweetResult.legacy.in_reply_to_status_id_str,
+            permanentUrl: `https://twitter.com/${this.runtime.getSetting("TWITTER_USERNAME")}/status/${tweetResult.rest_id}`,
+            hashtags: [],
+            mentions: [],
+            photos: [],
+            thread: [],
+            urls: [],
+            videos: []
+          };
+          await this.runtime.cacheManager.set(
+            `twitter/${this.client.profile.username}/lastPost`,
+            {
+              id: tweet.id,
+              timestamp: Date.now()
+            }
+          );
+          await this.client.cacheTweet(tweet);
+          elizaLogger.log(`Tweet posted:
  ${tweet.permanentUrl}`);
-        await this.runtime.ensureRoomExists(roomId);
-        await this.runtime.ensureParticipantInRoom(
-          this.runtime.agentId,
-          roomId
-        );
-        await this.runtime.messageManager.createMemory({
-          id: stringToUuid(tweet.id + "-" + this.runtime.agentId),
-          userId: this.runtime.agentId,
-          agentId: this.runtime.agentId,
-          content: {
-            text: newTweetContent.trim(),
-            url: tweet.permanentUrl,
-            source: "twitter"
-          },
-          roomId,
-          embedding: getEmbeddingZeroVector(),
-          createdAt: tweet.timestamp
-        });
-      } catch (error) {
-        elizaLogger.error("Error sending tweet:", error);
-      }
+          await this.runtime.ensureRoomExists(roomId);
+          await this.runtime.ensureParticipantInRoom(
+            this.runtime.agentId,
+            roomId
+          );
+          await this.runtime.messageManager.createMemory({
+            id: stringToUuid(tweet.id + "-" + this.runtime.agentId),
+            userId: this.runtime.agentId,
+            agentId: this.runtime.agentId,
+            content: {
+              text: newTweetContent.trim(),
+              url: tweet.permanentUrl,
+              source: "twitter"
+            },
+            roomId,
+            embedding: getEmbeddingZeroVector(),
+            createdAt: tweet.timestamp
+          });
+        } catch (error) {
+          elizaLogger.error("Error sending tweet:", error);
+        }
     } catch (error) {
       elizaLogger.error("Error generating new tweet:", error);
     }
